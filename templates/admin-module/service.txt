import { Injectable } from '@angular/core'
import { {{ properCase model }}, {{ properCase model }}Api } from '@colmena/admin-lb-sdk'
export { {{ properCase model }} } from '@colmena/admin-lb-sdk'
import { UiDataGridService, FormService } from '@colmena/admin-ui'
import { Observable } from 'rxjs/Observable'
import { Subscription } from 'rxjs/Subscription'

@Injectable()
export class {{ properCase model }}sService extends UiDataGridService {

  public icon = 'icon-globe'
  public title = '{{ properCase model }}s'
  public selected{{ properCase model }}: {{ properCase model }}

  public tableColumns = [
    { field: 'id', label: 'ID', action: 'view' },
    { field: 'name', label: 'Name', action: 'view' },
  ]

  constructor(
    private {{ camelCase model }}Api: {{ properCase model }}Api,
    private formService: FormService,
  ) {
    super()
    this.columns = this.tableColumns
  }

  setSelected{{ properCase model }}({{ camelCase model }}: {{ properCase model }}) {
    this.selected{{ properCase model }} = {{ camelCase model }}
  }

  getFormFields() {
    return [
      this.formService.input('id', {
        label: 'ID',
        placeholder: 'ID',
      }),
      this.formService.input('name', {
        label: 'Name',
        placeholder: 'Name',
      }),
      this.formService.email('email', {
        label: 'Email',
        placeholder: 'Email',
      }),
      this.formService.input('description', {
        label: 'Description',
        placeholder: 'Description',
      }),
    ]
  }

  getFormConfig() {
    return {
      icon: this.icon,
      fields: this.getFormFields(),
      showCancel: true,
      hasHeader: false,
    }
  }

  getItems(): Observable<{{ properCase model }}[]> {
    return this.{{ camelCase model }}Api.find(this.getFilters())
  }

  getItem(id): Observable<{{ properCase model }}> {
    return this.{{ camelCase model }}Api.findById(id)
  }

  getItemCount(): Observable<any> {
    return this.{{ camelCase model }}Api.count(this.getWhereFilters())
  }

  upsertItem(item, successCb, errorCb): Subscription {
    if (item.id) {
      return this.upsert{{ properCase model }}(item, successCb, errorCb)
    }
    return this.create{{ properCase model }}(item, successCb, errorCb)
  }

  upsert{{ properCase model }}(item, successCb, errorCb): Subscription {
    return this.{{ camelCase model }}Api.upsert(item).subscribe(successCb, errorCb)
  }

  create{{ properCase model }}(item, successCb, errorCb): Subscription {
    return this.{{ camelCase model }}Api.create(item).subscribe(successCb, errorCb)
  }

  deleteItem(item, successCb, errorCb): Subscription {
    return this.{{ camelCase model }}Api.deleteById(item.id).subscribe(successCb, errorCb)
  }
}
