const chalk = require('chalk')
const path = require('path')

const log = require('../lib/logger')

const {kebabCase} = require('lodash')

const {input} = require('../lib/inputs')

const generatorName = '{{ name }}'
const description = 'Generate a {{ name }}'

module.exports = function (plop) {

  const basePath = plop.getDestBasePath()
  const targetPath = path.join(basePath, 'templates')

  const prompts = [
    input('name', 'Name:', true),
  ]

  const actions = data => {
    const actions = []

    // Create some variants of the module name
    const modulePath = data.path
    const moduleName = data.name
    const moduleFileName = kebabCase(moduleName)

    // Make the variable available to the templates
    data.modulePath = modulePath
    data.moduleName = moduleName
    data.moduleFileName = moduleFileName

    // Push and add action to the actions array, prepend target and template path
    const addFile = (templateFile, ...targetFiles) => actions.push({
      type: 'add',
      templateFile: path.join(generatorName, templateFile),
      path: path.join(...targetFiles),
    })

    // These are the handlers for each of the moduleItems we can generate
    const handlers = {
      packageJson: () => {
        log.white.b('Adding package.json...')
        addFile('package.json', `${targetPath}/${moduleFileName}/package.json`)
      },
    }

    const createActions = [
      'packageJson',
    ]

    // Loop over all the selected moduleItems and execute their handler.
    createActions.forEach(
      action =>
        handlers[action]
          ? handlers[action]()
          : log.red.b(`Handler for ${action} not defined.`)
    )

    return actions
  }

  plop.setGenerator(generatorName, {description, prompts, actions})
}
